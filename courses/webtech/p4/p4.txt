
                           (Advanced) Web Technologies
                                  Spring 2021
                                   Project 4


turnin code:  awt_p4


For this project develop a single webpage named p4.html.


p4.html (webworkers / threads) --------

    Use webworkers to examine a range of integers *inclusive*.
    For each integer, compute the square-root of the square-root of the integer,
    i.e.  sqrt(sqrt(x))

    Count the number of resultant values whose fractional part is > 0.93
         45.79  do NOT count
        674.96  DO count

    A sufficient technique would be to compute the original value mod 1.

    The interface should present the user with a "number" box that will only
    accept values in the range from 1 to 4; this will be used to indicate
    the number of threads that should be used to compute the result.  Note
    that the "main" thread of the browser does not participate in computing
    the result; it will merely display the result at the end.

    Below that box, there should be a pair of boxes into which we can type
    the low and high range of values to be examined.  These numbers are
    permitted to be large, e.g. 9 billion (9000000000), although you can
    assume that the range will be small enough to compute in a few seconds.
    The numbers will be >= 0.

    Provide a start button that the user can click when the above values
    have been entered.

    Finally, when the computation is complete, display information about
    the results and which threads computed them.  For example, if 2 threads
    compute this range:
        111000 999000
    the correct output format would be:
        THREAD: 44455     // <-- no need to identify which thread
        THREAD: 44323
        TOTAL:  88778     // <-- total of all the above
        TIME 12.345678    // <-- NOTE: this is a fake time I just made up
    NOTE:  the above numbers are NOT actual numbers for this problem; 
        they are made up just to show the format

    An easy way to get the diff in two times might be something like this:
        t1 = new Date();
        // do some work
        t2 = new Date();
        console.log( t2-t1 );         // displays in milliseconds
        console.log( (t2-t1)/1000 );  // displays in seconds


Use turnin to submit a tar file containing all files for the project.

p4 will be graded in one of two ways (like p1):

    1. use p4.html as an argument to google chrome on the cmd-line
         #### note we now require p4.html instead of p1.html ####

    2. python3 -m http.server --cgi 5994 &
        ## where 5994 is a port that may change; I will choose the port
        ##   number AT THE TIME OF TESTING

    in chrome on another computer, visit:
        http://www.cs.mtsu.edu:5994    ## 5994 chgd to same port as above

    When I visit that URL, there should be a file there named p4.html
    which I will select to load into the browser.
